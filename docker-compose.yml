version: "3"
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
    networks:
      - shopper-network
    env_file:
      - .env
    volumes:
      - ./backend:/app
    command: npm run start:prod

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    volumes:
      - ./frontend:/app
    command: npm start

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: shopperdb
    networks:
      - shopper-network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_SITE_BASEURL: "/"
      ME_CONFIG_SITE_PORT: 8081
    networks:
      - shopper-network

    postgres:
      image: postgres:15
      container_name: postgres-db
      restart: always
      ports:
        - "5432:5432"
      environment:
        POSTGRES_USER: nestuser
        POSTGRES_PASSWORD: nestpassword
        POSTGRES_DB: shopperdb
      volumes:
        - postgres_data:/var/lib/postgresql/data


networks:
  shopper-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data: